"""
Input: Stream of data generated by POS, stored in Table
TODO:Generate events for SKUs going out of stock for vendors
Generate events for data inconsistencies
TODO:Generate events for missing data
"""
import records
import redis
import json

db = records.Database('postgres://:@127.0.0.1:5432/muse')
config = json.load(open("mail_config.json", "r"))

def data_inconsistency(store_id):
	rows = db.query("""
		select count(*), barcode from data_stream
		where barcode not in (select barcode from products where barcode is not null)
			and length(barcode)=13 and barcode ~ '\d'
			and storeid = '{store_id}'
			group by 2 order by 1 desc limit 5
		""".format(store_id=store_id))

	message = """The POS system is generating the following unmapped barcodes:"""
	message+='\nBarcode       | Count of Occurrence'
	for row in rows:
		message += "\n"+row['barcode'] + ' | ' + str(row['count'])
	print(message)
	event = {
		"Subject": "Data Inconsistencies at Store "+store_id,
		"To": config["receiver"],
		"From": config["sender"],
		"message": message
		}
	redis_client = redis.Redis()
	redis_client.lpush("event_pipeline", json.dumps(event))

# data_inconsistency('DEL0000000005')